# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

#access_log /proc/self/fd/1 vhost;
#error_log /proc/self/fd/2;
access_log /var/log/nginx/access.log;
error_log /var/log/nginx/error.log;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

server {
	listen 80;
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

upstream {{ $host }} {
{{ range $container := $containers }}
	{{ $addrLen := len $container.Addresses }}
	{{/* If only 1 port exposed, use that */}}
	{{ if eq $addrLen 1 }}
		{{ with $address := index $container.Addresses 0 }}
		   # {{$container.Name}}
		   server {{ $address.IP }}:{{ $address.Port }};
		{{ end }}
	{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
	{{ else if $container.Env.VIRTUAL_PORT }}
		{{ range $address := .Addresses }}
		   {{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
		   # {{$container.Name}}
		   server {{ $address.IP }}:{{ $address.Port }};
		   {{ end }}
		{{ end }}
	{{/* Else default to standard web port 80 */}}
	{{ else }}
		{{ range $address := $container.Addresses }}
			{{ if eq $address.Port "80" }}
			# {{$container.Name}}
			server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}

{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := replace $vhostCert ".crt" "" -1 }}
{{ $vhostCert := replace $vhostCert ".key" "" -1 }}

{{/* Use the cert specifid on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}

{{ if (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

server {
	server_name {{ $host }};
	return 301 https://$host$request_uri;
}

server {
    listen 443;
	server_name {{ $host }};
	ssl on;
	ssl_protocols       SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;

	#ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
	#ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

	ssl_certificate /etc/nginx/certs/server.crt;
	ssl_certificate_key /etc/nginx/certs/server.key;

	client_max_body_size 1m;

	{{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
	include {{ printf "/etc/nginx/vhost.d/%s" $host }};
	{{ end }}

	location / {
		proxy_pass {{ $proto }}://{{ $host }};
		proxy_redirect  {{ $proto }}://{{ $host }}/ /;
		proxy_read_timeout 60s;

		{{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
		auth_basic	"Restricted {{ $host }}";
		auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
		{{ end }}
	}
}
{{ else }}

server {
	{{ if $.Env.DEFAULT_HOST }}
	  {{ if eq $.Env.DEFAULT_HOST $host }}
	    listen 80 default_server;
	    server_name {{ $host }};
	  {{ else }}
	    server_name {{ $host }};
          {{ end }}
	{{ else }}
	  server_name {{ $host }};
	{{ end }}

	{{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
	include {{ printf "/etc/nginx/vhost.d/%s" $host }};
	{{ end }}

	client_max_body_size 10M;

	location / {
		proxy_pass {{ $proto }}://{{ $host }};
		proxy_redirect  {{ $proto }}://{{ $host }}/ /;
        proxy_read_timeout 60s;
		{{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
		auth_basic	"Restricted {{ $host }}";
		auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
		{{ end }}
	}
}

{{ if (and (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}
server {
	server_name {{ $host }};
	listen 443 ssl spdy;
	return 503;

	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}
{{ end }}

{{ end }}
{{ end }}
